# -*- coding: utf-8 -*-
"""bib-text

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZFJ77qK1489MlR3OI3arP-ocrm4C0k0

**Modifica el año de publicación**
"""

import re

def limpiar_anos(archivo):
    with open(archivo, 'r') as f:
        contenido = f.read()
    contenido_limpio = re.sub(r'(year = \{\d+)[^\d\}]*\}', r'\1}', contenido)
    with open(archivo, 'w') as f:
        f.write(contenido_limpio)

# Uso de la función
archivo = '/content/sample_data/SAGE.txt'
limpiar_anos(archivo)

"""**Salto de línea**"""

def modify_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    for i in range(len(lines)):
        if lines[i].startswith('@article{'):
            # Buscar la ubicación de 'author'
            start = lines[i].find('author')
            # Insertar un salto de línea antes de 'author'
            lines[i] = lines[i][:start] + '\n' + lines[i][start:]

    with open(file_path, 'w') as file:
        file.writelines(lines)

# Uso de la función
modify_file('/content/sample_data/SAGE.txt')

import re

def leer_autor_y_ano(archivo):
    with open(archivo, 'r') as f:
        contenido = f.readlines()
    for linea in contenido:
        if linea.startswith('author = {'):
            autor = re.search(r'author = \{(.+)\}', linea).group(1)
            print('Autor:', autor)
        elif linea.startswith('year = {'):
            ano = re.search(r'year = \{(.+)\}', linea).group(1)
            print('Año:', ano)

# Uso de la función
archivo = '/content/sample_data/SAGE.txt'
leer_autor_y_ano(archivo)

import re

def crear_nombres_desde_archivo(archivo):
    with open(archivo, 'r') as f:
        contenido = f.read()

    # Buscar todas las coincidencias de "author" y "year" en el documento
    matches = re.findall(r'author\s*=\s*\{([^}]+)\}\s*.*?year\s*=\s*\{([^}]+)\}', contenido, re.DOTALL)

    for autor, ano in matches:
        # Buscar el primer nombre en la cadena del autor
        primer_nombre = re.search(r'\b\w+\b', autor).group()
        # Obtener los últimos dos dígitos del año
        ultimo_dos_digitos = ano[-2:]
        # Unir el primer nombre del autor con los últimos dos dígitos del año
        nuevo_nombre = f'{primer_nombre}{ultimo_dos_digitos}'
        print('Nuevo nombre creado:', nuevo_nombre)

# Uso de la función
archivo = '/content/sample_data/SAGE.txt'
crear_nombres_desde_archivo(archivo)

import re

def modificar_archivo_con_nuevo_nombre(archivo):
    with open(archivo, 'r') as f:
        contenido = f.read()

    # Buscar todas las entradas de artículo
    entradas = re.split(r'(?=@article{)', contenido)

    nombres_creados = {}  # Un diccionario para realizar un seguimiento de los nombres creados

    contenido_modificado = ""

    for entrada in entradas:
        matches = re.search(r'@article{\s*(.*?)\n.*?author\s*=\s*\{([^}]+)\}\s*.*?year\s*=\s*\{([^}]+)\}', entrada, re.DOTALL)
        if matches:
            nombre_articulo = matches.group(1)
            autor = matches.group(2)
            ano = matches.group(3)

            # Buscar el primer nombre en la cadena del autor
            primer_nombre = re.search(r'\b\w+\b', autor).group()
            # Obtener los últimos dos dígitos del año
            ultimos_digitos_ano = ano[-2:]
            nuevo_nombre = f'{primer_nombre}{ultimos_digitos_ano},{nombre_articulo[-2:]}'

            # Reemplazar el nombre del artículo con el nuevo nombre en la entrada
            entrada_modificada = entrada.replace(f'@article{{{nombre_articulo}', f'@article{{{nuevo_nombre}')
            contenido_modificado += entrada_modificada

    # Escribir el contenido modificado en el archivo
    with open(archivo, 'w') as f:
        f.write(contenido_modificado)

# Uso de la función
archivo = '/content/sample_data/SAGE.txt'
modificar_archivo_con_nuevo_nombre(archivo)

"""**.bib**  """

import re

def agregar_claves_identificacion(input_file, output_file):
    with open(input_file, 'r', encoding='utf-8') as bib_file:
        bib_data = bib_file.read()

    # Utilizar una expresión regular para encontrar todas las entradas de tipo @article
    entries = re.split(r'(?=@article{)', bib_data)

    contenido_modificado = ""

    for entry in entries:
        if "@article{" in entry:
            autor_match = re.search(r'author\s*=\s*\{([^}]+)\}', entry)
            ano_match = re.search(r'year\s*=\s*\{([^}]+)\}', entry)

            if autor_match and ano_match:
                autor = autor_match.group(1)
                ano = ano_match.group(1)

                # Extraer el primer nombre del autor
                primer_nombre = re.search(r'\b\w+\b', autor).group()
                # Obtener los últimos dos dígitos del año
                ultimos_digitos_ano = ano[-2:]

                # Generar la nueva clave de identificación
                nueva_clave = f"{primer_nombre}{ultimos_digitos_ano}"

                # Agregar la nueva clave a la entrada
                entry = re.sub(r'@article{', f'@article{{{nueva_clave},', entry)

        contenido_modificado += entry

    # Escribir el contenido modificado en el archivo de salida
    with open(output_file, 'w', encoding='utf-8') as new_bib_file:
        new_bib_file.write(contenido_modificado)

# Reemplaza 'input.bib' y 'output.bib' con los nombres de tus archivos de entrada y salida
agregar_claves_identificacion('/content/export.bib', 'output.bib')